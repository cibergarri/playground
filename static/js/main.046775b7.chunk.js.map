{"version":3,"sources":["Project.js","App.js","serviceWorker.js","index.js"],"names":["Project","react_default","a","createElement","className","class","href","concat","this","props","route","title","Component","projects","Projects","_ref","map","project","src_Project","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAgBeA,yLAVX,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,iBAAgBJ,EAAAC,EAAAC,cAAA,KAAGG,KAAI,KAAAC,OAAOC,KAAKC,MAAMC,OAASL,MAAM,0BAA0BG,KAAKC,MAAME,iBAL9FC,cCAhBC,EAAW,CACf,CACEH,MAAM,oBACNC,MAAM,sBACN,CACAD,MAAM,QACNC,MAAM,+BACN,CACAD,MAAM,QACNC,MAAM,uBACN,CACAD,MAAM,qBACNC,MAAM,qDACN,CACAD,MAAM,oBACNC,MAAM,sBAIV,SAASG,EAATC,GAA8B,IAAXF,EAAWE,EAAXF,SACjB,OACAZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAWH,EAAAC,EAAAC,cAAA,WACvBU,EAASG,IAAI,SAACC,GAAD,OAAahB,EAAAC,EAAAC,cAACe,EAAYD,UAkB7BE,mLAZX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,uCAE/BF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACW,EAAD,CAAUD,SAAUA,aAPZD,aClBEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.046775b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\n\r\nclass Project extends Component {\r\n  render() {\r\n    return (\r\n    <div className=\"Project\">\r\n        <p>\r\n            <div class=\"well well-lg \"><a href={`./${this.props.route}`} class=\"btn btn-primary btn-lg\">{this.props.title}</a></div>\r\n        </p>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Project;\r\n","import React, { Component } from 'react';\nimport Project from './Project'\nimport './App.css';\n\nconst projects = [\n  {\n    route:'playground/react_authorquizz',\n    title:'React Author Quizz',\n  },{\n    route:'books',\n    title:'Books ( ES6 - React course)',\n  },{\n    route:'todos',\n    title:'ToDos (Yeoman Demo)',\n  },{\n    route:'push_notifications',\n    title:'Push notifications (forked from simple-push-demo)',\n  },{\n    route:'gcm_notifications',\n    title:'Gcm notifications',\n  },\n]\n\nfunction Projects({projects}) {\n  return (\n  <div className=\"Projects\"><br/>\n    {projects.map((project) => <Project {...project}/>)}\n  </div>);\n}\n\nclass App extends Component {\n  render() {    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\"><h1>Test Projects Playground</h1>\n        </header>\n        <body>\n          <Projects projects={projects}/>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}